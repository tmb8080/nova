generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String              @id @default(uuid())
  fullName                String?
  email                   String?             @unique
  phone                   String?             @unique
  password                String
  isEmailVerified         Boolean             @default(false)
  isPhoneVerified         Boolean             @default(false)
  isActive                Boolean             @default(true)
  isAdmin                 Boolean             @default(false)
  referralCode            String              @unique
  referredBy              String?
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt
  deposits                Deposit[]
  earningsSessions        EarningsSession[]
  otpCodes                OtpCode[]
  referralBonusesReceived ReferralBonus[]     @relation("ReferralBonusReferred")
  referralBonusesGiven    ReferralBonus[]     @relation("ReferralBonusReferrer")
  transactions            Transaction[]
  userTasks               UserTask[]
  userVip                 UserVip?
  walletAddresses         UserWalletAddress[]
  referrer                User?               @relation("UserReferrals", fields: [referredBy], references: [id])
  referrals               User[]              @relation("UserReferrals")
  wallet                  Wallet?
  withdrawals             Withdrawal[]

  @@map("users")
}

model Wallet {
  id                 String    @id @default(uuid())
  userId             String    @unique
  balance            Decimal   @default(0) @db.Decimal(18, 8)
  totalDeposits      Decimal   @default(0) @db.Decimal(18, 8)
  totalEarnings      Decimal   @default(0) @db.Decimal(18, 8)
  totalReferralBonus Decimal   @default(0) @db.Decimal(18, 8)
  dailyEarnings      Decimal   @default(0) @db.Decimal(18, 8)
  lastWithdrawal     DateTime?
  lastGrowthUpdate   DateTime  @default(now())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("wallets")
}

model UserWalletAddress {
  id        String   @id @default(uuid())
  userId    String
  network   String
  address   String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, network])
  @@map("user_wallet_addresses")
}

model CompanyWallet {
  id               String                     @id @default(uuid())
  network          String                     @unique
  address          String
  balance          Decimal                    @default(0) @db.Decimal(18, 8)
  totalDeposits    Decimal                    @default(0) @db.Decimal(18, 8)
  totalWithdrawals Decimal                    @default(0) @db.Decimal(18, 8)
  isActive         Boolean                    @default(true)
  lastUpdated      DateTime                   @default(now())
  createdAt        DateTime                   @default(now())
  transactions     CompanyWalletTransaction[]

  @@map("company_wallets")
}

model CompanyWalletTransaction {
  id              String        @id @default(uuid())
  companyWalletId String
  type            String
  amount          Decimal       @db.Decimal(18, 8)
  currency        String
  fromAddress     String?
  toAddress       String?
  transactionHash String?
  network         String
  status          String        @default("COMPLETED")
  metadata        Json?
  createdAt       DateTime      @default(now())
  companyWallet   CompanyWallet @relation(fields: [companyWalletId], references: [id])

  @@map("company_wallet_transactions")
}

model Deposit {
  id               String        @id @default(uuid())
  userId           String
  amount           Decimal       @db.Decimal(18, 8)
  currency         String
  coinbaseChargeId String?       @unique
  coinbaseCode     String?
  network          String?       // BEP20, TRC20, etc. for USDT deposits
  depositType      String?       // COINBASE, USDT_DIRECT, etc.
  status           DepositStatus @default(PENDING)
  transactionHash  String?
  webhookData      Json?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  adminNotes       String?
  user             User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([transactionHash, currency])
  @@map("deposits")
}

model Withdrawal {
  id              String           @id @default(uuid())
  userId          String
  amount          Decimal          @db.Decimal(18, 8)
  feeAmount       Decimal          @default(0) @db.Decimal(18, 8)
  currency        String
  walletAddress   String
  status          WithdrawalStatus @default(PENDING)
  adminNotes      String?
  processedBy     String?
  processedAt     DateTime?
  transactionHash String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  network         String?
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("withdrawals")
}

model Transaction {
  id          String          @id @default(uuid())
  userId      String
  type        TransactionType
  amount      Decimal         @db.Decimal(18, 8)
  description String
  referenceId String?
  createdAt   DateTime        @default(now())
  metadata    Json?
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model OtpCode {
  id        String   @id @default(uuid())
  userId    String
  code      String
  type      OtpType
  purpose   String
  expiresAt DateTime
  isUsed    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("otp_codes")
}

model AdminSettings {
  id                      String   @id @default(uuid())
  dailyGrowthRate         Decimal  @default(0.01) @db.Decimal(5, 4)
  minDepositAmount        Decimal  @default(10) @db.Decimal(18, 8)
  minWithdrawalAmount     Decimal  @default(10) @db.Decimal(18, 8)
  withdrawalFeeFixed      Decimal  @default(0) @db.Decimal(18, 8)
  withdrawalFeePercent    Decimal  @default(0) @db.Decimal(5, 4)
  isDepositEnabled        Boolean  @default(true)
  isWithdrawalEnabled     Boolean  @default(true)
  isRegistrationEnabled   Boolean  @default(true)
  maintenanceMode         Boolean  @default(false)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  minUsdtDepositAmount    Decimal  @default(30) @db.Decimal(18, 8)
  minUsdcWithdrawalAmount Decimal  @default(20) @db.Decimal(18, 8)
  referralBonusLevel1Rate Decimal  @default(0.05) @db.Decimal(5, 4)
  referralBonusLevel2Rate Decimal  @default(0.02) @db.Decimal(5, 4)
  referralBonusLevel3Rate Decimal  @default(0.01) @db.Decimal(5, 4)

  @@map("admin_settings")
}

model NetworkFees {
  id        String   @id @default(uuid())
  network   String
  currency  String
  feeAmount Decimal  @db.Decimal(18, 8)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([network, currency])
  @@map("network_fees")
}

model WithdrawalFeeTier {
  id         String   @id @default(uuid())
  minAmount  Decimal  @db.Decimal(18, 8)
  maxAmount  Decimal? @db.Decimal(18, 8)
  percent    Decimal  @db.Decimal(5, 4) // 0..1
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("withdrawal_fee_tiers")
}

model ReferralBonus {
  id           String   @id @default(uuid())
  referrerId   String
  referredId   String
  depositId    String?
  bonusAmount  Decimal  @db.Decimal(18, 8)
  bonusRate    Decimal  @db.Decimal(5, 4)
  createdAt    DateTime @default(now())
  level        Int      @default(1)
  vipPaymentId String?
  referred     User     @relation("ReferralBonusReferred", fields: [referredId], references: [id])
  referrer     User     @relation("ReferralBonusReferrer", fields: [referrerId], references: [id])

  @@map("referral_bonuses")
}

model VipLevel {
  id               String            @id @default(uuid())
  name             String            @unique
  amount           Decimal           @db.Decimal(18, 8)
  dailyEarning     Decimal           @db.Decimal(18, 8)
  isActive         Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  bicycleColor     String?
  bicycleFeatures  String?
  bicycleModel     String?
  earningsSessions EarningsSession[]
  userVips         UserVip[]

  @@map("vip_levels")
}

model UserVip {
  id         String   @id @default(uuid())
  userId     String   @unique
  vipLevelId String
  joinedAt   DateTime @default(now())
  isActive   Boolean  @default(true)
  totalPaid  Decimal  @db.Decimal(18, 8)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  vipLevel   VipLevel @relation(fields: [vipLevelId], references: [id])

  @@map("user_vips")
}

model EarningsSession {
  id               String               @id @default(uuid())
  userId           String
  vipLevelId       String
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  actualEndTime    DateTime?
  dailyEarningRate Decimal              @db.Decimal(18, 8)
  expectedEndTime  DateTime
  startTime        DateTime             @default(now())
  status           EarningSessionStatus @default(ACTIVE)
  totalEarnings    Decimal?             @db.Decimal(18, 8)
  user             User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  vipLevel         VipLevel             @relation(fields: [vipLevelId], references: [id])

  @@map("earnings_sessions")
}

model Task {
  id            String     @id @default(uuid())
  title         String
  description   String
  type          TaskType
  reward        Decimal    @db.Decimal(18, 8)
  requirements  Json?
  isActive      Boolean    @default(true)
  isRepeatable  Boolean    @default(false)
  cooldownHours Int?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  userTasks     UserTask[]

  @@map("tasks")
}

model UserTask {
  id           String     @id @default(uuid())
  userId       String
  taskId       String
  status       TaskStatus @default(PENDING)
  startedAt    DateTime?
  completedAt  DateTime?
  rewardEarned Decimal?   @db.Decimal(18, 8)
  metadata     Json?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  task         Task       @relation(fields: [taskId], references: [id])
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, taskId])
  @@map("user_tasks")
}

model OrphanTransaction {
  id               String    @id @default(uuid())
  transactionHash  String    @unique
  fromAddress      String
  toAddress        String
  amount           Decimal   @db.Decimal(18, 8)
  currency         String
  network          String
  blockNumber      Int
  status           String    @default("UNMATCHED")
  matchedDepositId String?
  processedAt      DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  @@map("orphan_transactions")
}

model Announcement {
  id          String   @id @default(uuid())
  title       String
  content     String
  type        String   @default("INFO") // INFO, WARNING, SUCCESS, ERROR
  priority    Int      @default(1) // 1 = low, 2 = medium, 3 = high
  isActive    Boolean  @default(true)
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("announcements")
}

enum DepositStatus {
  PENDING
  CONFIRMED
  FAILED
  EXPIRED
}

enum WithdrawalStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
  FAILED
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  REFERRAL_BONUS
  WALLET_GROWTH
  VIP_EARNINGS
  VIP_PAYMENT
  ADMIN_ADJUSTMENT
  TASK_REWARD
}

enum OtpType {
  EMAIL
  PHONE
}

enum EarningSessionStatus {
  ACTIVE
  COMPLETED
  STOPPED
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum TaskType {
  DAILY_EARNING
}
